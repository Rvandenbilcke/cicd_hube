# name: GitHub Actions Demo
# run-name: ${{ github.actor }} is testing out GitHub Actions 🚀
# on: [push]
# jobs:
#   Explore-GitHub-Actions:
#     runs-on: ubuntu-latest
#     steps:
#       - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
#       - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
#       - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
#       - name: Check out repository code
#         uses: actions/checkout@v4
#       - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
#       - run: echo "🖥️ The workflow is now ready to test your code on the runner."
#       - name: List files in the repository
#         run: |
#           ls ${{ github.workspace }}
#       - run: echo "🍏 This job's status is ${{ job.status }}."

# name: CI Workflow

# on:
#   push:
#     branches:
#       - main
#   pull_request:

env:
  ENV_TARGET: "canary"

#   #test
# jobs:
#   install:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Set up Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: 'latest'

#       - name: Cache node modules
#         uses: actions/cache@v3
#         with:
#           path: |
#             node_modules
#             .npm
#           key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
#           restore-keys: |
#             ${{ runner.os }}-node-

#       - name: Install dependencies
#         run: npm ci

# name: CI Pipeline
# on:
#  push:
#    branches:
#      - main
#  pull_request:
#    branches:
#      - main
# jobs:
#  install:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#      - name: Setup Node.js
#        uses: actions/setup-node@v3
#        with:
#          node-version: 'latest'
#      - name: Install dependencies
#        run: npm ci --cache .npm --prefer-offline
        
#   lint:
#         runs-on: ubuntu-latest
#         needs: install
#         if: github.ref != 'refs/tags/*' && !contains(github.event.head_commit.message, 'chore: release')
#         steps:
#           - name: Checkout code
#             uses: actions/checkout@v2
    
#           - name: Run linter
#             run: npm run lint
               
#   only-canary:
#         runs-on: ubuntu-latest
#         needs: install
#         if: env.ENV_TARGET == 'canary'
#         steps:
#           - name: Echo Canary Message
#             run: echo "Hello Only Canary!"
    
#  unit-test:
#         runs-on: ubuntu-latest
#         needs: install
#         if: github.ref != 'refs/tags/*' && !contains(github.event.head_commit.message, 'chore: release')
#         steps:
#           - name: Checkout code
#             uses: actions/checkout@v2
    
#           - name: Run unit tests
#             run: npm test
    
#       integration-test:
#         runs-on: ubuntu-latest
#         needs: unit-test
#         if: github.ref != 'refs/tags/*' && !contains(github.event.head_commit.message, 'chore: release')
#         steps:
#           - name: Checkout code
#             uses: actions/checkout@v2
    
#           - name: Echo Integration Message
#             run: echo "Hello Integration!"
    
#       e2e-test:
#         runs-on: ubuntu-latest
#         needs: integration-test
#         if: github.event_name == 'pull_request'
#         steps:
#           - name: Checkout code
#             uses: actions/checkout@v2
    
#           - name: Echo E2E Test Message
#             run: echo "Hello E2E"

name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  install:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 'latest'
      - name: Install dependencies
        run: npm ci --cache .npm --prefer-offline

  lint:
    runs-on: ubuntu-latest
    needs: install
    if: ${{ github.ref != 'refs/tags/*' && !contains(github.event.head_commit.message, 'chore: release') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run linter
        run: npm run lint

  only-canary:
    runs-on: ubuntu-latest
    needs: install
    if: ${{ env.ENV_TARGET == 'canary' }}
    steps:
      - name: Echo Canary Message
        run: echo "Hello Only Canary!"

  unit-test:
    runs-on: ubuntu-latest
    needs: install
    if: ${{ github.ref != 'refs/tags/*' && !contains(github.event.head_commit.message, 'chore: release') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run unit tests
        run: npm test

  integration-test:
    runs-on: ubuntu-latest
    needs: unit-test
    if: ${{ github.ref != 'refs/tags/*' && !contains(github.event.head_commit.message, 'chore: release') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Echo Integration Message
        run: echo "Hello Integration!"

  e2e-test:
    runs-on: ubuntu-latest
    needs: integration-test
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Echo E2E Test Message
        run: echo "Hello E2E"
